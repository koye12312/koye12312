//rakeawayshop
using System;
using System.Collections.Generic;
using System.IO;

namespace JustNom
{
    public static class TakeawayShop
    {
        public static string ShopName { get; private set; }
        public static List<FoodItem> Menu { get; private set; } = new List<FoodItem>();
        public static List<Topping> AvailableToppings { get; private set; } = new List<Topping>();
        public static List<Garnish> AvailableGarnishes { get; private set; } = new List<Garnish>();

        public static List<Order> Orders { get; private set; } = new List<Order>();

        // Method to load the menu from a file
        public static void LoadMenu(string menuFilePath)
{
    if (!File.Exists(menuFilePath))
    {
        throw new FileNotFoundException("Menu file not found.", menuFilePath);
    }

    var lines = File.ReadAllLines(menuFilePath);
    foreach (var line in lines)
    {
        if (line.StartsWith("Name:"))
        {
            ShopName = line.Split(':')[1].Trim();
            Console.WriteLine($"Shop Name: {ShopName}");  // Debugging output
        }
        else if (line.StartsWith("Toppings:"))
        {
            ParseToppings(line);
            Console.WriteLine("Toppings loaded.");  // Debugging output
        }
        else if (line.StartsWith("Garnishes:"))
        {
            ParseGarnishes(line);
            Console.WriteLine("Garnishes loaded.");  // Debugging output
        }
        else if (line.StartsWith("Pizza:"))
        {
            ParsePizza(line);
            Console.WriteLine("Pizza loaded.");  // Debugging output
        }
        else if (line.StartsWith("Burger:"))
        {
            ParseBurger(line);
            Console.WriteLine("Burger loaded.");  // Debugging output
        }
    }

    // After loading, list all menu items to verify
    Console.WriteLine("Menu items loaded:");
    foreach (var item in Menu)
    {
        Console.WriteLine($"- {item.Name}");
    }
}

        // Method to save all orders to a file
        public static void SaveOrders(string filePath)
        {
            using (var writer = new StreamWriter(filePath))
            {
                foreach (var order in Orders)
                {
                    writer.WriteLine(order.ToOrderString());
                }
            }
            Console.WriteLine($"All orders have been saved to {filePath}");
        }
    }
}