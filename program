//program
using System;

namespace JustNom
{
    class Program
    {
        static void Main(string[] args)
        {
            string menuFilePath = "menu.txt";
            TakeawayShop.LoadMenu(menuFilePath);

            Console.WriteLine("Welcome to JustNom Takeaway!");

            while (true)
            {
                DisplayMainMenu();
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        PlaceOrder();
                        break;
                    case "2":
                        SaveOrdersToFile();
                        break;
                    case "3":
                        Console.WriteLine("Exiting the program. Thank you for using JustNom!");
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please select an option from the menu.");
                        break;
                }
            }
        }

        // Function to display the main menu
        static void DisplayMainMenu()
        {
            Console.WriteLine("\nMain Menu:");
            Console.WriteLine("1. Place an order");
            Console.WriteLine("2. Save orders to file");
            Console.WriteLine("3. Exit");
            Console.Write("Choose an option (1-3): ");
        }

        // Function to handle placing an order
        static void PlaceOrder()
        {
            Console.Write("Enter your name: ");
            string customerName = Console.ReadLine();

            // Create a new order
            Order order;
            Console.Write("Is this order for delivery? (yes/no): ");
            string deliveryChoice = Console.ReadLine().ToLower();
            if (deliveryChoice == "yes")
            {
                Console.Write("Enter your delivery address: ");
                string address = Console.ReadLine();
                order = new DeliveryOrder
                {
                    CustomerName = customerName,
                    Address = address
                };
            }
            else
            {
                order = new Order { CustomerName = customerName };
            }

            // Add food items to the order
            while (true)
            {
                DisplayMenuItems();
                Console.Write("Enter the name of the item you want to order (or 'done' to finish): ");
                string itemName = Console.ReadLine();
                if (itemName.ToLower() == "done")
                    break;

                var foodItem = TakeawayShop.Menu.Find(f => f.Name.Equals(itemName, StringComparison.OrdinalIgnoreCase));
                if (foodItem == null)
                {
                    Console.WriteLine("Item not found on the menu. Please try again.");
                    continue;
                }

                FoodItem orderItem = CloneFoodItem(foodItem);

                // Customize the food item
                if (orderItem is Pizza pizza)
                {
                    CustomizePizza(pizza);
                }
                else if (orderItem is Burger burger)
                {
                    CustomizeBurger(burger);
                }

                // Add the customized item to the order
                order.Items.Add(orderItem);
            }

            order.OutputOrder();
            TakeawayShop.Orders.Add(order);
        }

        // Function to display available menu items
        static void DisplayMenuItems()
        {
            Console.WriteLine("\nMenu:");
            foreach (var item in TakeawayShop.Menu)
            {
                item.PrintDetails();
            }
        }

        // Function to save all orders to a file
        static void SaveOrdersToFile()
        {
            string filePath = "orders.txt";
            TakeawayShop.SaveOrders(filePath);
        }

        // Function to clone a food item (remains unchanged)
        private static FoodItem CloneFoodItem(FoodItem original)
        {
            if (original is Pizza originalPizza)
            {
                return new Pizza(originalPizza.Name, new List<Topping>(originalPizza.Toppings), originalPizza.BasePrice);
            }
            else if (original is Burger originalBurger)
            {
                return new Burger(originalBurger.Name, new List<Garnish>(originalBurger.Garnishes), originalBurger.BasePrice);
            }
            throw new InvalidOperationException("Unknown food item type.");
        }

        // Function to customize a pizza by adding or removing toppings
        private static void CustomizePizza(Pizza pizza)
        {
            Console.WriteLine($"Customizing your {pizza.Name} pizza.");

            // Remove unwanted toppings
            Console.Write("Do you want to remove any toppings? (yes/no): ");
            if (Console.ReadLine().ToLower() == "yes")
            {
                Console.WriteLine("Enter the names of toppings to remove, separated by commas:");
                string[] toppingsToRemove = Console.ReadLine().Split(',');
                pizza.RemoveToppings(toppingsToRemove.Select(t => t.Trim()).ToList());
            }

            // Add additional toppings
            Console.Write("Do you want to add extra toppings? (yes/no): ");
            if (Console.ReadLine().ToLower() == "yes")
            {
                Console.WriteLine("Enter the names of toppings to add, separated by commas:");
                string[] toppingsToAdd = Console.ReadLine().Split(',');
                var additionalToppings = toppingsToAdd.Select(t => new Topping { Name = t.Trim(), Price = 50 }).ToList(); // Assume each additional topping costs 50 pence
                pizza.AddToppings(additionalToppings);
            }
        }

        // Function to customize a burger by adding or removing garnishes
        private static void CustomizeBurger(Burger burger)
        {
            Console.WriteLine($"Customizing your {burger.Name} burger.");

            // Remove unwanted garnishes
            Console.Write("Do you want to remove any garnishes? (yes/no): ");
            if (Console.ReadLine().ToLower() == "yes")
            {
                Console.WriteLine("Enter the names of garnishes to remove, separated by commas:");
                string[] garnishesToRemove = Console.ReadLine().Split(',');
                burger.RemoveGarnishes(garnishesToRemove.Select(g => g.Trim()).ToList());
            }

            // Add additional garnishes
            Console.Write("Do you want to add extra garnishes? (yes/no): ");
            if (Console.ReadLine().ToLower() == "yes")
            {
                Console.WriteLine("Enter the names of garnishes to add, separated by commas:");
                string[] garnishesToAdd = Console.ReadLine().Split(',');
                var additionalGarnishes = garnishesToAdd.Select(g => new Garnish { Name = g.Trim(), Price = 30 }).ToList(); // Assume each additional garnish costs 30 pence
                burger.AddGarnishes(additionalGarnishes);
            }
        }
    }
}